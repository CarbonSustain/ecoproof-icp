type PostStatus = variant { OPEN; PENDING; PAID; EXPIRED };

type Vote = record {
  user: text;
  data_id: nat64;
  vote_value: bool;
  submission_id: nat64;
};

type UserSubmission = record {
  data_id: nat64;
  user: text;
  data: record {
    latitude: float64;
    longitude: float64;
    city: text;
    temperature: float64;
    weather: text;
    timestamp: nat64;
    submission_photo_url: text;
  };
  rewarded: bool;
  status: PostStatus;
  expiration_timestamp: nat64;
};

type UserSubmissionSummary = record {
  data_id: nat64;
  city: text;
  status: PostStatus;
};

type VoteSummary = record {
  data_id: nat64;
  upvotes: nat32;
  downvotes: nat32;
};

type Challenge = record {
  id          : nat64;
  title       : text;
  latitude    : float64;
  longitude   : float64;
  radius_m    : float64;
  expiration  : nat64;     
  picture_url : text;
};

type Role = variant {
    User;
    Admin;
    Moderator;
};

service : {
  submit_weather_data : (
    text,     // telegram_id
    float64,  // latitude
    float64,  // longitude
    text,     // city
    float64,  // temperature
    text,     // weather
    text      // submission_photo_url
  ) -> (nat64);  // returns data_id

  vote_on_data : (
    text,   // user_id
    nat64,  // data_id
    bool    // vote_value (true = valid, false = invalid)
  ) -> (text);  // confirmation string

  reward_user : (
    nat64  // data_id
  ) -> (variant { Ok: text; Err: text });

  get_balance : (text) -> (nat64);

  get_submission : (nat64) -> (variant { 
    Ok: record { 
      data_id: nat64;
      user: text; 
      data: record { 
        latitude: float64; 
        longitude: float64; 
        city: text; 
        temperature: float64; 
        weather: text; 
        timestamp: nat64;
        submission_photo_url: text;
      }; 
      rewarded: bool;
      status: PostStatus;
    }; 
    Err: text;
  });

  get_all_submissions : () -> (vec record { 
    data_id: nat64;
    user: text; 
    data: record { 
      latitude: float64; 
      longitude: float64; 
      city: text; 
      temperature: float64; 
      weather: text; 
      timestamp: nat64;
      submission_photo_url: text;
    }; 
    rewarded: bool;
    status: PostStatus;
  });

  get_user_posts: (text) -> (vec record {
    data_id: nat64;
    user: text;
    data: record {
      latitude: float64;
      longitude: float64;
      city: text;
      temperature: float64;
      weather: text;
      timestamp: nat64;
      submission_photo_url: text;
    };
    rewarded: bool;
    status: PostStatus;
  });

  get_all_users: () -> (vec record {
    user_id: text;
    balance: nat64;
    first_name: opt text;
    last_name: opt text;
    username: opt text;
    language_code: opt text;
    is_bot: bool;
    profile_picture_url: opt text;
    wallet_address: opt text; 
    role: Role;
  });

  create_tg_user : (
    text,       // telegram_id
    text,       // first_name
    text,       // last_name
    text,       // username
    text,       // language_code
    bool,       // is_bot
    text        // profile_picture_url
  ) -> (text);

  get_tg_user : (text) -> (variant {
    Ok: record {
      user_id: text;
      balance: nat64;
      first_name: opt text;
      last_name: opt text;
      username: opt text;
      language_code: opt text;
      is_bot: bool;
      profile_picture_url: opt text;
      wallet_address: opt text; 
      role: Role;
    };
    Err: text;
  });

  get_vote_summary : (nat64) -> (record {
    data_id: nat64;
    upvotes: nat32;
    downvotes: nat32;
  });

  update_wallet_address : (
    text,  // user_id
    text   // wallet_address
  ) -> (text);

  get_post_status : (
    nat64  // data_id
  ) -> (text);

  finalize_post_status : (
    nat64  // data_id
  ) -> (text);

    get_expiration_time : (
    nat64  // data_id
  ) -> (variant { Ok : nat64; Err : text });

  get_all_expiration_times : () -> (vec record {
    data_id : nat64;
    expiration_timestamp : nat64;
  });
  get_votes_by_user : (text) -> (vec Vote) query;
  update_vote : (text, nat64, bool) -> (text);
  delete_vote : (text, nat64) -> (text);
  get_submissions_by_city : (text) -> (vec UserSubmission) query;
  get_rewarded_submissions : (text) -> (vec UserSubmission) query;
  get_user_submission_summary : (text) -> (vec UserSubmissionSummary) query;
  get_leaderboard_by_total_votes : () -> (vec VoteSummary) query;
  get_leaderboard_by_upvotes : () -> (vec VoteSummary) query;
  get_user_submission_locations: (text) -> (vec record { status: variant { OPEN; PAID; PENDING; EXPIRED }; latitude: float64; data_id: nat64; longitude: float64 }) query;

  get_submission_map_by_city : () -> (vec record { text; nat64 }) query;
  get_paid_submission_map_by_city : () -> (vec record { text; nat64 }) query;

  create_challenge : (
    text,      // title
    float64,   // latitude
    float64,   // longitude
    float64,   // radius_m
    nat64,     // expiration (ns since epoch)
    text       // picture_url
  ) -> (nat64);
  get_active_challenges : (float64, float64) -> (vec Challenge) query;
  submit_weather_data_with_challenge : (
    text,      // telegram_id
    float64,   // latitude
    float64,   // longitude
    text,      // city
    float64,   // temperature
    text,      // weather
    text,      // submission_photo_url
    nat64      // challenge_id
  ) -> (variant { Ok : nat64; Err : text });

  get_challenge : (nat64) -> (variant { Ok : Challenge; Err : text }) query;
  get_user_submissions_by_challenge : (text, nat64) -> (vec UserSubmission) query;
  get_challenges_expiring_soon : (nat64) -> (vec Challenge) query;
  get_challenges_by_radius : (float64, float64, float64) -> (vec Challenge) query;
  get_submissions_by_challenge : (nat64) -> (vec UserSubmission) query;

  update_user_role: (text, text, Role) -> (variant { Ok: text; Err: text });
  get_user_role: (text) -> (variant { Ok: Role; Err: text });
  mark_submission_rewarded : (nat64) -> (variant { Ok : text; Err : text });
};
